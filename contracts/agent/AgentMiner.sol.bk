// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;


import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "../interface/IZooKeeperFarming.sol";
import "../interface/IWaspFarming.sol";
import "../interface/IBoosting.sol";
import "../interface/IZooNFT.sol";
import "./AgentStorage.sol";

contract AgentMiner is Ownable, AgentStorage {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    event LoadPool(address indexed farm, uint256 indexed zooPid);
    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 nftTokenId);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);

    // TODO: Debug EVENT
    event DepositDebug1(uint256 indexed pid, address indexed user, uint256 amount, uint256 nftTokenId);
    event UpdatePoolDebug1(uint256 indexed pid, uint256 index, address indexed user, address lpToken);
    event UpdatePoolDebug2(uint256 indexed pid, address indexed user, address lpToken);
    event LoadDepositDebug1(address indexed farm, uint256 indexed zooPid, uint256 poolLength);
    event LoadDepositDebug2(address indexed farm, uint256 indexed zooPid, uint256 poolLength, address lpToken);
    event BalanceDebug1(address indexed token, address indexed owner, uint256 amount);
    event TransferDebug1(address indexed token, address indexed from, address indexed to, uint256 amount);

    constructor(
        address _zooKeeprFarming,
        address _devaddr
    ) public {
        zooKeeperFarming = _zooKeeprFarming;
        wanswapFarming = IZooKeeperFarming(wanswapFarming).boostingAddr();
        devaddr = _devaddr;
        boostingAddr = IZooKeeperFarming(_zooKeeprFarming).boostingAddr();
        zoo = IZooKeeperFarming(zooKeeperFarming).zoo();
        wasp = IZooKeeperFarming(zooKeeperFarming).wasp();
        zooPerBlock = IZooKeeperFarming(zooKeeperFarming).zooPerBlock();
    }

    // Deposit LP tokens to ZooKeeperFarming for ZOO allocation.
    function deposit(uint256 _pid, uint256 _amount, uint256 _nftTokenId) external {
        // require (IZooKeeperFarming(zooKeeperFarming).poolLength() > _pid, "invalid agent");
        updatePool(_pid);

        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        emit DepositDebug1(_pid, msg.sender, _amount, _nftTokenId);

        uint256 lpTokenBalance = agent.lpToken.balanceOf(address(this));
        uint256 userLpTokenBalance = agent.lpToken.balanceOf(msg.sender);
        emit BalanceDebug1(address(agent.lpToken), address(this), lpTokenBalance);
        emit BalanceDebug1(address(agent.lpToken), msg.sender, userLpTokenBalance);

        if (_amount != 0) {
            emit TransferDebug1(address(agent.lpToken), msg.sender, address(this), _amount);
            agent.lpToken.safeTransferFrom(msg.sender, address(this), _amount);
        }

        // update nft token or not
        uint256 oldNftTokenId;
        // address boostingAddr = zooBoostingAddress();
        bool needUpdatePoolNft;
        (oldNftTokenId, needUpdatePoolNft) = canReplacePoolNFT(_pid, _nftTokenId, boostingAddr);
        if (_nftTokenId != 0) {
            require(needUpdatePoolNft, "too slow");
        }

        uint256 lpSupply = zooPoolSupply(_pid);
        address zooTokenAddr = zoo;
        if (needUpdatePoolNft) {
            // return old nft, and transfer nft reward
            IZooKeeperFarming(zooKeeperFarming).withdraw(_pid, lpSupply);

            address oldNftOwner = agent.nftOwner;
            agent.nftOwner = msg.sender;

            IERC721 nftToken = IERC721(getNftAddress(boostingAddr));
            nftToken.safeTransferFrom(msg.sender, address(this), _nftTokenId);
            nftToken.safeTransferFrom(address(this), oldNftOwner, oldNftTokenId);

            uint256 oldZooNftReward = agent.nftUserZooReward;
            agent.nftUserZooReward = 0;
            if (oldZooNftReward != 0) {
                safeTokenTransfer(zooTokenAddr, oldNftOwner, oldZooNftReward);
            }
        } else {
            IZooKeeperFarming(zooKeeperFarming).withdraw(_pid, 0);
        }

        if (devZoo != 0) {
            uint256 pendDevZoo = devZoo;
            devZoo = 0;
            safeTokenTransfer(zooTokenAddr, devaddr, pendDevZoo);
        }

        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 userOldAmount = user.amount;
        if (userOldAmount != 0) {
            uint256 pending = userOldAmount.mul(agent.accZooPerShare).div(1e12).sub(user.zooRewardDebt);
            if (pending != 0) {
                safeTokenTransfer(zooTokenAddr, msg.sender, pending);
            }
        }

        user.amount = userOldAmount.add(_amount);
        user.zooRewardDebt = user.amount.mul(agent.accZooPerShare).div(1e12);

        if (agent.dualFarmingEnable) {
            uint256 waspPending = userOldAmount.mul(agent.accWaspPerShare).div(1e12).sub(user.waspRewardDebt);
            safeTokenTransfer(wasp, msg.sender, waspPending);
            user.waspRewardDebt = user.amount.mul(agent.accWaspPerShare).div(1e12);
        }

        if (needUpdatePoolNft) {
            lpSupply = lpSupply.add(_amount);
            IERC20(agent.lpToken).approve(zooKeeperFarming, lpSupply);
            IZooKeeperFarming(zooKeeperFarming).deposit(_pid, lpSupply, 0, _nftTokenId);
        } else {
            IERC20(agent.lpToken).approve(zooKeeperFarming, _amount);
            IZooKeeperFarming(zooKeeperFarming).deposit(_pid, _amount, 0, _nftTokenId);
        }

        emit Deposit(msg.sender, _pid, _amount, _nftTokenId);
    }

    // Withdraw LP tokens from ZooKeeperFarming.
    function withdraw(uint256 _pid, uint256 _amount) external {
        updatePool(_pid);

        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 userOldAmount = user.amount;
        uint256 pendingZoo = user.amount.mul(agent.accZooPerShare).div(1e12).sub(user.zooRewardDebt);

        user.amount = user.amount.sub(_amount);
        user.zooRewardDebt = user.amount.mul(agent.accZooPerShare).div(1e12);

        address zooTokenAddr = zoo;
        safeTokenTransfer(zooTokenAddr, msg.sender, pendingZoo);
        if (devZoo != 0) {
            uint256 pendDevZoo = devZoo;
            devZoo = 0;
            safeTokenTransfer(zooTokenAddr, devaddr, pendDevZoo);
        }

        if (agent.dualFarmingEnable) {
            uint256 waspPending = userOldAmount.mul(agent.accWaspPerShare).div(1e12).sub(user.waspRewardDebt);
            user.waspRewardDebt = user.amount.mul(agent.accWaspPerShare).div(1e12);
            safeTokenTransfer(wasp, msg.sender, waspPending);
        }

        IZooKeeperFarming(zooKeeperFarming).withdraw(_pid, _amount);
        if (_amount > 0) {
            agent.lpToken.safeTransfer(address(msg.sender), _amount);
        }

        emit Withdraw(msg.sender, _pid, _amount);
    }

    function removeNFT(uint256 _pid) external {
        updatePool(_pid);

        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        require(agent.nftOwner != address(0) && agent.nftOwner == msg.sender, "invalid NFT owner");

        uint256 lpSupply = zooPoolSupply(_pid);
        agent.nftOwner = address(0);

        if (lpSupply != 0) {
            IZooKeeperFarming(zooKeeperFarming).withdraw(_pid, lpSupply);
        }

        // return the nft
        // address boostingAddr = zooBoostingAddress();
        IERC721 nftToken = IERC721(getNftAddress(boostingAddr));
        uint256 nftTokenId = getPoolNftTokenId(_pid, boostingAddr);
        nftToken.safeTransferFrom(address(this), msg.sender, nftTokenId);

        if (lpSupply != 0) {
            IZooKeeperFarming(zooKeeperFarming).deposit(_pid, lpSupply, 0, 0);
        }

        uint256 pendDevZoo = devZoo;
        address zooTokenAddr = zoo;
        if (pendDevZoo != 0) {
            devZoo = 0;
            safeTokenTransfer(zooTokenAddr, devaddr, pendDevZoo);
        }

        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 nftUserZooReward = agent.nftUserZooReward;
        uint256 zooPending = user.amount.mul(agent.accZooPerShare).div(1e12).sub(user.zooRewardDebt);
        user.zooRewardDebt = user.amount.mul(agent.accZooPerShare).div(1e12);
        if (nftUserZooReward != 0) {
            agent.nftUserZooReward = 0;
            zooPending = zooPending.add(nftUserZooReward);
        }
        safeTokenTransfer(zooTokenAddr, msg.sender, zooPending);

        if (agent.dualFarmingEnable) {
            uint256 waspPending = user.amount.mul(agent.accWaspPerShare).div(1e12).sub(user.waspRewardDebt);
            safeTokenTransfer(wasp, msg.sender, waspPending);
            user.waspRewardDebt = user.amount.mul(agent.accWaspPerShare).div(1e12);
        }

    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdrawEnable(uint256 _pid) external onlyOwner {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        agent.emergencyMode = true;
        agent.dualFarmingEnable = false;
        IZooKeeperFarming(zooKeeperFarming).emergencyWithdraw(_pid);
    }

    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) external {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        require(agent.emergencyMode, "not enable emergence mode");

        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 amount = user.amount;
        uint256 zooRewardDebt = user.zooRewardDebt;
        uint256 waspRewardDebt = user.waspRewardDebt;
        user.amount = 0;

        uint256 waspPending = amount.mul(agent.accWaspPerShare).div(1e12).sub(waspRewardDebt);
        uint256 zooPending = amount.mul(agent.accZooPerShare).div(1e12).sub(zooRewardDebt);
        user.waspRewardDebt = amount.mul(agent.accWaspPerShare).div(1e12);
        user.zooRewardDebt = user.amount.mul(agent.accZooPerShare).div(1e12);
        if (waspPending != 0) {
            safeTokenTransfer(wasp, msg.sender, waspPending);
        }
        if (zooPending != 0) {
            safeTokenTransfer(zoo, msg.sender, zooPending);
        }

        agent.lpToken.safeTransfer(address(msg.sender), amount);
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }

    // Update dev address by the previous dev.
    function dev(address _devaddr) external {
        require(msg.sender == devaddr, "Should be dev address");
        devaddr = _devaddr;
    }

    function getAgentIndex(uint256 _pid) private view returns (uint256 index) {
        index = incPid2IncAgentIndex[_pid.add(1)].sub(1);
    }

    function checkPoolExists(uint256 _pid) private view returns (bool isExists) {
        uint256 incIndex = incPid2IncAgentIndex[_pid.add(1)];
        isExists = (incIndex != 0);
    }

    function poolLength() external view returns (uint256 length) {
        length = agentPool.length;
    }

    // Update reward variables of the given agent to be up-to-date.
    function updatePool(uint256 _pid) public {

        uint256 agentIndex;
        if (!checkPoolExists(_pid)) {
            agentIndex = loadPool(_pid);
        } else {
            agentIndex = getAgentIndex(_pid);
        }
        AgentPool storage agent = agentPool[agentIndex];

        emit UpdatePoolDebug1(_pid, agentIndex, msg.sender, address(agent.lpToken));

        uint256 lpSupply;
        uint256 zooRewardDebt;
        uint256 waspRewardDebt;
        (lpSupply,zooRewardDebt,waspRewardDebt) = IZooKeeperFarming(zooKeeperFarming).userInfo(_pid, address(this));
        if (lpSupply == 0) {
            lpSupply = agent.lpToken.balanceOf(address(this));
        }
        if (lpSupply == 0) {
            if (agent.lastRewardBlock < block.number) {
                agent.lastRewardBlock = block.number;
            }
            return;
        }

        if (block.number <= agent.lastRewardBlock) {
            return;
        }
        emit UpdatePoolDebug2(_pid, msg.sender, address(agent.lpToken));

        uint256 nftOwnerPendReward;
        uint256 devPendReward;
        uint256 poolPendReward;
        (nftOwnerPendReward,devPendReward,poolPendReward) = pendingFarmingBoostedZoo(_pid);
        agent.accZooPerShare = agent.accZooPerShare.add(poolPendReward.mul(1e12).div(lpSupply));
        agent.nftUserZooReward = agent.nftUserZooReward.add(nftOwnerPendReward);
        devZoo = devZoo.add(devPendReward);

        if (agent.dualFarmingEnable) {
            uint256 waspReward = IZooKeeperFarming(zooKeeperFarming).pendingWasp(_pid, address(this));
            agent.accWaspPerShare = agent.accWaspPerShare.add(waspReward.mul(1e12).div(lpSupply));
        }
        agent.lastRewardBlock = block.number;
    }

    function loadFarmingConfig() external onlyOwner {
        boostingAddr = IZooKeeperFarming(zooKeeperFarming).boostingAddr();
        zoo = IZooKeeperFarming(zooKeeperFarming).zoo();
        wasp = IZooKeeperFarming(zooKeeperFarming).wasp();
    }

    /**      get function */
    // View function to see pending ZOOs on frontend.
    function pendingZoo(uint256 _pid, address _user) external view returns (uint256) {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accZooPerShare = agent.accZooPerShare;
        uint256 pendZoo;

        uint256 lpSupply;
        (lpSupply,,) = IZooKeeperFarming(zooKeeperFarming).userInfo(_pid, address(this));

        if (lpSupply != 0) {
            uint256 nftOwnerPendReward;
            uint256 devPendReward;
            uint256 poolPendReward;
            (nftOwnerPendReward,devPendReward,poolPendReward) = pendingFarmingBoostedZoo(_pid);
            accZooPerShare = accZooPerShare.add(poolPendReward.mul(1e12).div(lpSupply));
            if (agent.nftOwner == _user) {
                pendZoo = agent.nftUserZooReward.add(nftOwnerPendReward);
            }
        }
        return pendZoo.add(user.amount.mul(accZooPerShare).div(1e12).sub(user.zooRewardDebt));
    }

    function pendingWasp(uint256 _pid, address _user) external view returns (uint256) {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accWaspPerShare = agent.accWaspPerShare;

        uint256 lpSupply;
        if (!agent.dualFarmingEnable) {
            return 0;
        }

        (lpSupply,,) = IZooKeeperFarming(zooKeeperFarming).userInfo(_pid, address(this));

        if (lpSupply != 0) {
            uint256 waspReward = IZooKeeperFarming(zooKeeperFarming).pendingWasp(_pid, address(this));
            accWaspPerShare = accWaspPerShare.add(waspReward.mul(1e12).div(lpSupply));
        }
        return user.amount.mul(accWaspPerShare).div(1e12).sub(user.waspRewardDebt);
    }

    function getZooPoolTotalSupply(uint256 _pid, uint256 _waspPid) private view returns (uint256 lpSupply) {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        if (wanswapFarming == address(0) || !agent.dualFarmingEnable) {
            lpSupply = agent.lpToken.balanceOf(zooKeeperFarming);
        } else {
            (lpSupply,) = IWaspFarming(wanswapFarming).userInfo(_waspPid, zooKeeperFarming);
        }
    }

    function getAccZooPerShareFarming(uint256 _pid, uint256 _waspPid, uint256 accZooPerShareFarming, uint256 zooLastRewardBlock, uint256 zooAllocPoint) private view returns (uint256) {
        uint256 poolZooTotalSupply = getZooPoolTotalSupply(_pid, _waspPid);
        if (poolZooTotalSupply != 0) {
            uint256 zooTotalAllocPoint = IZooKeeperFarming(zooKeeperFarming).totalAllocPoint();
            uint256 zooMultiplier = IZooKeeperFarming(zooKeeperFarming).getMultiplier(zooLastRewardBlock, block.number);
            uint256 poolZooTotalReward = zooMultiplier.mul(zooPerBlock).mul(zooAllocPoint).div(zooTotalAllocPoint);
            // uint256 poolZooTotalReward = IZooKeeperFarming(zooKeeperFarming).getMultiplier(zooLastRewardBlock, block.number)
            //     .mul(zooPerBlock).mul(zooAllocPoint).div(IZooKeeperFarming(zooKeeperFarming).totalAllocPoint());
            return accZooPerShareFarming.add(poolZooTotalReward.mul(1e12)).div(poolZooTotalSupply);
        }
    }

    function getBoostingMultiplier(uint256 _pid) private view returns (uint256) {
        uint256 boostMultiplier = IBoosting(boostingAddr).getMultiplier(_pid, address(this));
        uint256 maxMultiplier = zooMaxMultiplier();
        if (boostMultiplier > maxMultiplier) {
            boostMultiplier = maxMultiplier;
        }
        return boostMultiplier;
    }

    function getNftOwnerAmount(uint256 _pid) private view returns (uint256) {
        AgentPool storage agent = agentPool[getAgentIndex(_pid)];
        // AgentPool storage agent = agentPool[_pid];
        UserInfo storage nftUser = userInfo[_pid][agent.nftOwner];

        return nftUser.amount;
    }

    // function getPendingZooDetails(uint256 _pid, uint256 _waspPid, uint256 _accZooPerShareFarming, uint256 _zooRewardDebtFarming, uint256 _zooLastRewardBlock, uint256 _zooAllocPoint, uint _lpSupply) internal view returns (uint256 nftOwnerPendReward, uint256 devPendReward, uint256 poolPendReward) {
    //     accZooPerShareFarming = getAccZooPerShareFarming(_pid, _waspPid, _accZooPerShareFarming, _zooLastRewardBlock, _zooAllocPoint);

    //     uint256 totalPendRewardWithoutNFT = _lpSupply.mul(accZooPerShareFarming).div(1e12).sub(_zooRewardDebtFarming);
    //     uint256 totalPendRewardWithNFT = totalPendRewardWithoutNFT;

    //     uint256 boostMultiplier = getBoostingMultiplier(_pid);
    //     // uint256 boostMultiplier = IBoosting(boostingAddr).getMultiplier(_pid, address(this));
    //     // uint256 maxMultiplier = zooMaxMultiplier();
    //     // if (boostMultiplier > maxMultiplier) {
    //     //     boostMultiplier = maxMultiplier;
    //     // }
    //     totalPendRewardWithNFT = totalPendRewardWithNFT.mul(boostMultiplier).div(1e12);

    //     uint256 totalPendRewardPureByNFT = totalPendRewardWithNFT.sub(totalPendRewardWithoutNFT);
    //     nftOwnerPendReward = nftUser.amount.mul(totalPendRewardPureByNFT).div(_lpSupply);
    //     totalPendRewardPureByNFT = totalPendRewardPureByNFT.sub(nftOwnerPendReward);
    //     devPendReward = totalPendRewardPureByNFT.mul(TEAM_PERCENT).div(100);
    //     poolPendReward = totalPendRewardWithoutNFT.add(totalPendRewardPureByNFT).sub(devPendReward);
    // }
    /********* internal **********/
    // View function to see pending ZOOs on frontend.
    function pendingFarmingBoostedZoo(uint256 _pid) internal view returns (uint256 nftOwnerPendReward, uint256 devPendReward, uint256 poolPendReward) {
        uint256 lpSupply;
        uint256 zooRewardDebt;
        uint256 waspRewardDebt;
        (lpSupply,zooRewardDebt,waspRewardDebt) = zooUserInfo(_pid);
        if (lpSupply == 0) {
            AgentPool storage agent = agentPool[getAgentIndex(_pid)];
            lpSupply = agent.lpToken.balanceOf(address(this));
            if (lpSupply == 0) {
                return (nftOwnerPendReward, devPendReward, poolPendReward);
            }
        }

        uint256 zooAllocPoint;
        uint256 zooLastRewardBlock;
        uint256 accZooPerShareFarming;
        uint256 waspPid;

        (zooAllocPoint,zooLastRewardBlock,accZooPerShareFarming,waspPid) = zooPoolState(_pid);

        if (block.number > zooLastRewardBlock) {
            // uint256 poolZooTotalSupply = getZooPoolTotalSupply(_pid, waspPid);
            // if (poolZooTotalSupply != 0) {
            //     // uint256 zooTotalAllocPoint = IZooKeeperFarming(zooKeeperFarming).totalAllocPoint();
            //     // uint256 zooMultiplier = IZooKeeperFarming(zooKeeperFarming).getMultiplier(zooLastRewardBlock, block.number);
            //     // uint256 poolZooTotalReward = zooMultiplier.mul(zooPerBlock).mul(zooAllocPoint).div(zooTotalAllocPoint);
            //     uint256 poolZooTotalReward = IZooKeeperFarming(zooKeeperFarming).getMultiplier(zooLastRewardBlock, block.number)
            //         .mul(zooPerBlock).mul(zooAllocPoint).div(IZooKeeperFarming(zooKeeperFarming).totalAllocPoint());
            //     accZooPerShareFarming = accZooPerShareFarming.add(poolZooTotalReward.mul(1e12)).div(poolZooTotalSupply);
            // }
            accZooPerShareFarming = getAccZooPerShareFarming(_pid, waspPid, accZooPerShareFarming, zooLastRewardBlock, zooAllocPoint);

            uint256 totalPendRewardWithoutNFT = lpSupply.mul(accZooPerShareFarming).div(1e12).sub(zooRewardDebt);
            uint256 totalPendRewardWithNFT = totalPendRewardWithoutNFT;

            uint256 boostMultiplier = getBoostingMultiplier(_pid);
            // uint256 boostMultiplier = IBoosting(boostingAddr).getMultiplier(_pid, address(this));
            // uint256 maxMultiplier = zooMaxMultiplier();
            // if (boostMultiplier > maxMultiplier) {
            //     boostMultiplier = maxMultiplier;
            // }
            totalPendRewardWithNFT = totalPendRewardWithNFT.mul(boostMultiplier).div(1e12);

            // AgentPool storage agent = agentPool[getAgentIndex(_pid)];
            // // AgentPool storage agent = agentPool[_pid];
            // UserInfo storage nftUser = userInfo[_pid][agent.nftOwner];

            uint256 nftOwnerAmount = getNftOwnerAmount(_pid);
            uint256 totalPendRewardPureByNFT = totalPendRewardWithNFT.sub(totalPendRewardWithoutNFT);
            // nftOwnerPendReward = nftUser.amount.mul(totalPendRewardPureByNFT).div(lpSupply);
            nftOwnerPendReward = nftOwnerAmount.mul(totalPendRewardPureByNFT).div(lpSupply);
            totalPendRewardPureByNFT = totalPendRewardPureByNFT.sub(nftOwnerPendReward);
            devPendReward = totalPendRewardPureByNFT.mul(TEAM_PERCENT).div(100);
            poolPendReward = totalPendRewardWithoutNFT.add(totalPendRewardPureByNFT).sub(devPendReward);
        }
    }

    // Safe wasp transfer function, just in case if rounding error causes pool to not have enough WASP.
    function safeTokenTransfer(address _token, address _to, uint256 _amount) internal {
        uint256 balance = IERC20(_token).balanceOf(address(this));
        if (_amount > balance) {
            IERC20(_token).transfer(_to, balance);
        } else {
            IERC20(_token).transfer(_to, _amount);
        }
    }

    function canReplacePoolNFT(uint256 _pid, uint256 _nftTokenId, address _boostingAddr) internal view returns (uint256 oldNftTokenId, bool canUpdatePoolNft) {
        // update nft token or not
        if ((_nftTokenId != 0) && (_boostingAddr != address(0))) {
            uint256 nftBoosting = getNftBoosting(_nftTokenId, _boostingAddr);
            uint256 oldNftBoosting;
            oldNftTokenId = getBoostUserTokenId(_boostingAddr, _pid, address(this));
            if (oldNftTokenId != 0) {
                oldNftBoosting = getNftBoosting(oldNftTokenId, _boostingAddr);
                canUpdatePoolNft = (nftBoosting > oldNftBoosting);
            }
        }
    }

    function zooPoolState(uint256 _pid) internal view returns (uint256 allocPoint, uint256 lastRewardBlock, uint256 accZooPerShare, uint256 waspPid) {
        (,allocPoint,lastRewardBlock,accZooPerShare,waspPid,,,) = IZooKeeperFarming(zooKeeperFarming).poolInfo(_pid);
    }

    function zooUserInfo(uint256 _pid) internal view returns (uint256 lpSupply, uint256 zooRewardDebt, uint256 waspRewardDebt) {
        (lpSupply,zooRewardDebt,waspRewardDebt) = IZooKeeperFarming(zooKeeperFarming).userInfo(_pid, address(this));
    }

    function zooPoolSupply(uint256 _pid) internal view returns (uint256 lpSupply) {
        (lpSupply,,) = IZooKeeperFarming(zooKeeperFarming).userInfo(_pid, address(this));
    }

    function zooBoostingAddress() internal view returns (address boostingAddr_) {
        boostingAddr_ = IZooKeeperFarming(zooKeeperFarming).boostingAddr();
    }

    function zooMaxMultiplier() internal view returns (uint256 maxMultiplier) {
        maxMultiplier = IZooKeeperFarming(zooKeeperFarming).maxMultiplier();
    }

    function getNftAddress(address _boostingAddr) internal view returns (address NFTAddress) {
        NFTAddress = IBoosting(_boostingAddr).NFTAddress();
    }

    function getBoostUserTokenId(address _boostingAddr, uint256 _pid, address _user) internal view returns (uint256 tokenId) {
        (,,tokenId) = IBoosting(_boostingAddr).userInfo(_pid, _user);
    }

    function loadPool(uint256 _pid) internal returns (uint256 agentIndex) {
        uint256 lastRewardBlock;
        uint256 accZooPerShare;
        uint256 accWaspPerShare;
        address lpToken;
        bool dualFarmingEnable;
        bool emergencyMode;

        (lpToken,,lastRewardBlock,accZooPerShare,,accWaspPerShare,dualFarmingEnable,emergencyMode) = IZooKeeperFarming(zooKeeperFarming).poolInfo(_pid);

        LoadDepositDebug1(zooKeeperFarming, _pid, agentPool.length);
        agentPool.push(AgentPool({
            lastRewardBlock: block.number,
            accZooPerShare: 0,
            accWaspPerShare: 0,
            dualFarmingEnable: dualFarmingEnable,
            emergencyMode: emergencyMode,
            nftUserZooReward: 0,
            nftOwner: address(0),
            lpToken: IERC20(lpToken),
            disable: false
        }));
        LoadDepositDebug2(zooKeeperFarming, _pid, agentPool.length, lpToken);

        uint256 increasePid = _pid.add(1);
        uint256 increaseIndex = agentPool.length;
        incAgentIndex2IncPid[increaseIndex] = increasePid;
        incPid2IncAgentIndex[increasePid] = increaseIndex;

        agentIndex = increaseIndex - 1;

        emit LoadPool(zooKeeperFarming, _pid);
    }

    function getNftBoosting(uint256 _tokenId, address _boostingAddr) internal view returns (uint256) {
        address NFTAddress = getNftAddress(_boostingAddr);
        return IZooNFT(NFTAddress).getBoosting(_tokenId);
    }

    function getPoolNftTokenId(uint256 _pid, address _boostingAddr) internal view returns (uint256 oldNftTokenId) {
        oldNftTokenId = getBoostUserTokenId(_boostingAddr, _pid, address(this));
    }

}
